// Code generated by MockGen. DO NOT EDIT.
// Source: ./gcs_client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	jobrunaggregatorapi "github.com/openshift/ci-tools/pkg/jobrunaggregator/jobrunaggregatorapi"
	reflect "reflect"
)

// MockCIGCSClient is a mock of CIGCSClient interface
type MockCIGCSClient struct {
	ctrl     *gomock.Controller
	recorder *MockCIGCSClientMockRecorder
}

// MockCIGCSClientMockRecorder is the mock recorder for MockCIGCSClient
type MockCIGCSClientMockRecorder struct {
	mock *MockCIGCSClient
}

// NewMockCIGCSClient creates a new mock instance
func NewMockCIGCSClient(ctrl *gomock.Controller) *MockCIGCSClient {
	mock := &MockCIGCSClient{ctrl: ctrl}
	mock.recorder = &MockCIGCSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCIGCSClient) EXPECT() *MockCIGCSClientMockRecorder {
	return m.recorder
}

// ReadJobRunFromGCS mocks base method
func (m *MockCIGCSClient) ReadJobRunFromGCS(ctx context.Context, jobName, jobRunID string) (jobrunaggregatorapi.JobRunInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadJobRunFromGCS", ctx, jobName, jobRunID)
	ret0, _ := ret[0].(jobrunaggregatorapi.JobRunInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadJobRunFromGCS indicates an expected call of ReadJobRunFromGCS
func (mr *MockCIGCSClientMockRecorder) ReadJobRunFromGCS(ctx, jobName, jobRunID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadJobRunFromGCS", reflect.TypeOf((*MockCIGCSClient)(nil).ReadJobRunFromGCS), ctx, jobName, jobRunID)
}

// ListJobRunNames mocks base method
func (m *MockCIGCSClient) ListJobRunNames(ctx context.Context, jobName, startingID string) (chan string, chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobRunNames", ctx, jobName, startingID)
	ret0, _ := ret[0].(chan string)
	ret1, _ := ret[1].(chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListJobRunNames indicates an expected call of ListJobRunNames
func (mr *MockCIGCSClientMockRecorder) ListJobRunNames(ctx, jobName, startingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobRunNames", reflect.TypeOf((*MockCIGCSClient)(nil).ListJobRunNames), ctx, jobName, startingID)
}
